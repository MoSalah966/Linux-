youtube course 
df >> show partitions 
lsblk >> to check disks
fdisk -l  >> to start making a partitions
fdisk /dev/sdb
/ m  >> for help
/ n >> add new partition
/ p >> primary 
/ put the partition number
/ +5 G
/ p for print and check
/ w  for write 
lsblk
partprobe   > to scan your disks to make kernal know what you add
partprobe /dev/sdb
mkfs.ext4 /dev/sdb1   > make filesystem type extend 4 to partition sdb1
fdisk -l 
/d   >> to delete

cat /dev/random    >> write too much random data
cat /dev/random >> /dev/sdb    #uncontrolled process
dd if=/dev/random of=/dev/sdb bs=1b count=512 
# disk dumb input file and output file and block size and count to control what and how much you will write
dd if=/dev/zero of=bigfile bs=1M count=100
# write a file called bigfile in my current path with 100 mega
# if it was random not zero it won't be 100 mega it will be less because zero like format
mkfs.xfs -f /dev/sdb1   # -f here to format any inodes from the previous file system
mkfs.xfs -f -isize=512 /dev/sdb1  # determine the inode size
mount /dev/sdb1 /media/
# mount file system of partition sdb1 in media
umount /media  
# to un mount /media and make the partition unaccessable 
dumpe2fs /dev/sdb1    
# to get info about the ext partition
umount /dev/sdb1
e2fsck /dev/sdb1   
# check file system partition but only in case it's unmounted
dd if=/dev/sdb1 of=/sdb1-backup   
# even if it's corrupted make a backup in a file called sdb1-backup
dd if=/sdb1-backup of=/dev/sdb1
# to restore
# if you mount twice on same place you have to umount twice also
mount -t ext4 /dev/sdb1 /media 
# mount with specify the file system type
blkid #to show blocks uuid
mount UUID=xxxxxxx /media/
e2label /dev/sdb5 oracle
mount LABEL="oracle" /media
# syntax of /etc/fstab
vim /etc/fstab
# dev   mountpoint  type    mountoptions    dumporder   fs-checkorder
/dev/sdb5   /media  ext4    defaults             1           1
mount -a # tell the kernal to mount any thing in fstab

du -hsx * | sort -rh | head -10
#to get the most biggest file in the path
cat /etc/mtab  #to copy from it the syntax of the fstab file simce it's the mount tab file

cfdisk /dev/sdb  #showing disks in a different UI

>>compression<<
gzip  #faster
bzip2 # higher in compression retio 
gzip file1
gunzip file1
du -sh etc/  # disk usage - summerize human readable to etc
tar cf etc-backup.tar etc/   #create file archive from etc
tar xf etc-backup.tar        # extract file 
tar cvf etc-backup.tar      # create verbose means show me what the files you are archiving now
tar cvfz etc-backup.tar.gz etc/  #archive and compress directory with gzip
tar cvfj etc-backup.tar.bz2 etc/ #archive and compress directory with bzip2
tar tvfz etc-backup.tar.gz   # t means list this archiving files
------------------------------------------------------------------
>>processes<<
ps 
ps -a   #running processes from all the shells or all terminals
ps aux  # all the processes on the system with users pid cpu and mem
kill 9687 #kill with process ID 
kill -l   #show all signals 
kill -9 9687 #signal kill to force killing
ps -ef | less   #ppid alsso
pstree   #tree of the process
pgrep firefox  #search for pid
pkill firefox  #kill with process name
firefox &  #run this in background
fg  # fore ground 
jobs
fg %1 
bg %1
killall firefox
# the nice value is from -20 to 19 and the normal is 0 for any process and the highest is -20
#you can click on k inside top command to kill a process
nice -n 15 firefox   # give firefox process priority 15
renice -n -15 11852  #for process that already run and here we mention it with ID
whereis ls  #search for a command binary and doc
what is ls  #where is this command
locate network | less   # search for any file called network or include this word
# if you add file now, locate command will not find it till a half day of adding this file or you can force with
updatedb

find /etc/ -name network   #search in etc for network file
find /etc/ -iname network  #search with insensitive name
find / -iname network* 
find /etc/ -perm 755 
find /home/ -group student   # any file owned by gp student
find /home/ -user user-1  
find / -atime +1    #any file accessed since 1 day
find /etc/ -iname network -exec cp {} work/ \;
#find network under etc and execute the result at work directory
# if you want to copy directory add -r
grep root /etc/passwd   # grep the line that contain root word in passwd
grep -i root /etc/passwd  #insensitive 
grep word1 file1   # get the word word1 from file1
grep -v test file1  # give me any line not has test word in file1
grep -n # give the number of line that has the word 
grep -R root /etc/ # recursive means in all the path you give it
cut -f 1 -d : /etc/passwd  
#give me the field 1 means column 1 with dilemeter means the separation between a
#column and another is : in /etc/passwd
cut -f 1,3 -d : /etc/passwd 
# give me the columns 1 and 3 
# separation could be anything not just a :
cut -f 1-3  # give me from column 1 to 3
cut -f 3 -d : /etc/passwd | sort   #sort put the results in order
| sort -n  #sort numeric order
cut -d : -f 7 /etc/passwd | uniq 
# don't repeat the results
cut -d : -f 7 /etc | sort | uniq
>>VIM<<
n #next result
N #previous result
o #enter insert mode with new line under the line you are in 
O #enter insert above my line
yy #yank means copy this link
p # paste whole line
3 yy #copy three lines > nyy
dd # cut this line 
:12  #navigate to line 12
:set number #numbering the file 
:set nonumber #cancel numbering
u # undo 
dw #delete word
dl #delete leter
:7,10d  #delete lines from 7 to 10
:.,$d  #delete from cursor to end of the file
. #redo
gg  #go to the first line
G  #go to the end of file
:%s/sync/replicate  #substitute the sync word on cursor in file to replicate 
:%s/sync/replicate/g #g means global that means subsitute all the words sync to replicate
:r file1   # put all content in file1 inside this file in the location of the cursor
:w newfile #write this content in a file called new file
:w >> exsistingfile # write content inside current file to exsisting file 
d$ ## erase from the cursor to the end of line
d0 ## erase from the cursor to the start of the line
:!command ##to write any command on console when you are inside the file without exit and back again
:.!command #write the command output inside the file where the cursor point
yum/apt search httpd   #search for httpd package
chkconfig crond off = systemctl disable crond
systemctl is-enabled crond.service #asking is this service is enabled
systemctl is-active crond
systemctl poweroff #power off the machine
systemctl reboot   #reboot machine
systemctl mask crond.service  #mask service to make sure it won't start back after restart by itself
systemctl unmask crond  #unmasking the service
systemctl get-default # to know what is the default target for systemd >gui or cli
systemctl set-default multi-user.target # set default to multiuser.target means open CLI
runlevel #show what is the target number that you are stands on now
systemctl isolate graphical.target # run graphical target without reboot after i set the cli as default so both now are running
init 6 # reboot for the machine
init 0 # power off
- all the files for systemd are in /usr/lib/systemd/system
telinit = init
systemctl list-units # all units files of systemd with status
ls /boot/grub2/  #files for bootloader
less /boot/grub2/grub.config #conf file for bootloader
fdisk -l /dev/nvme0n1..... #to know which OS installed on which disk
- in case you want to make the time for boot different
vim /boot/grub2/grub.cfg 
set timeout=5  #change 5 to ex. 30
- in case i do wrong writes on the file /etc/grub2.cfg and i want to regenerate it
grub2-mkconfig -o /boot/grub2/grub.cfg  # -o means output and etc/grub2 will back to its original state
- in case you want to fix some values in grub2 file in case of regeneration
vim /etc/sysconfig/grub
set timeout=5
grub default=saved #means will choose the first OS if you have 2 and you can change it from saved to 2
grub2-mkconfig -o /boot/grub2/grub.cfg 
#if you change anything in this file, it will be fixed in /etc/grub2.cfg even if you run command grub2-mkconfig
#you have to run grub2-mkconfig after modifying in etc/sysconfig/grub file
#grub start numbering menuentries from 0 not from 1
ls -lZ # to show label of every file 
ls -lZ /etc/passwd
-------------------------------
- to reset root pass
-------------------------------
reboot
e  #to edit from boot screen 
rd.break #in the end of the last line means don't continue boot process
ctrl+x #to start
# it will give you a terminal with root access
mount -o remount,rw /sysroot/  #remount option with read write for the file system sysroot
passwd # to change password
touch /.autorelabel  # to relabel shadow file in /etc/shadow  after changing the root password
exit
reboot
------------------------------
ctrl+alt+delete #reboot the machine and must be disbabled as a best practice 
- to disabled them:
#cd /usr/lib/systemd/system/
#ls -l | grep -i del 
#vim ctrl-alt-del.target 
- disable it with one command: systemctl mask ctrl-alt-del.target
#this command create symlink from /etc/systemd/system/ctrl-alt-del.target to /dev/null
systemctl daemon-reload #to reload daemon after masking 
-------------------------------
---Network Manager---
nmcli #open network Manager
ip addr show = ip a s
ifdown 'interfacename'
if down eno03283  #to make this interface disabled
if up eno03283   # enable interface
nmcli connection show #show network connection
nmcli connection show eno03283 #show all network info for this eni 
nmcli connection delete eno03283 # delte this connenction
nmcli connection add con-name home ifname eno03283 type ethernet autoconnect yes
nmcli connection modify home ipv4.addresses 192.168.101.110/24 ipv4.gateway 192.168.101.2 ipv4.dns 8.8.8.8 ipv4.method manual
nmcli connection down home # disable it to apply modifications
nmcli connection up home
nmcli connection edit con-name work type wifi #if you want to change the type of connection
ls /etc/sysconfig/network-scripts/   # files of interfaces config are here
-------------------------------
mii-tool eno03283 # tool for knowing the physical link status
ethtool eno03283  # tool to give info about the modes that supported with you link
- if tab button doesn't continue words in nmcli so you have to install bash-completion
------------------------------
-change IP
nmcli connection mod #connname ipv6.addresses '2001::11:1/64'
nmcli connection down #connname
nmcli connection up #connname
------------------
ping6  #to ping ipv6
-to ping link local you have to specify interface
ping6 fe80::20c:29ff:fead:980f%eno03283   # or with I capital
ping6 -I eno03283 fe80::20c:29ff:fead:980f
----------------
ip -6 route    #show the route table of ipv6
ifconfig  #show non-down interfaces 
if config -a #show disabled and enabled interfaces
lspci | grep -i interface #show connected interfaces
lspci | grep -i net  #to show words like ethernet
ifconfig | grep "inet" 
route -n  #showing route table for machine
ip route add 8.8.8.8/32 via 192.168.101.2  #go out to google from this gateway
ip route del 8.8.8.8/32 via 192.168.101.2
ip add default  gw 192.168.101.2  # add this ip as the default gateway
ip route add 10.0.0.0/24 via 192.168.101.106 # go to this network from this gw
vim /etc/resolv.conf # file that is responsible for resolving DNS
-inside /etc/resolv.conf 
nameserver 8.8.8.8 
nameserver 8.8.4.4  # define nameservers inside the file for your machine 
----------
vim /etc/hosts # resolv IPs to dns hostnames with serveral names if needed and in the internal network
- the machine will ask etc/hosts firstly before /resolv.conf
- in /etc/nsswitch.conf  , it defines which file will asked by the machine firstly
hosts : files dns  # these two must be in nsswtich.conf to be able to ping hosts 
- to add more than DNS and be stable if there is a reboot in /etc/sysconfig/network-scripts/ifcfg-home 
nmcli connection modify home +ipv4.dns 8.8.8.8
--------------
-in case you disabled network manager, you have to use etc/resolv.conf (if you work with network service)
systemctl disable NetworkManager 
--------------------------------
hostname  #name of your machine 
hostname -f #fully qualified domain name of your machine
- to show FQDN you have to put it inside etc/hosts as machine IP and its domain 
1.1.1.1 salah.machinename.com 
- to change name of the machine from etc/hostname and put the name you want 
like prod.salah.com 
-------------------------
hostnamectl s  #control status to show status 
hostnamectl set-hostname test.salah.com # also change the name of the machine and inside the hostname file 
-another method to change hostname withour rebooting 
echo test2.salah.com > /proc/sys/kernel/hostname 
-----------------------------------------------------------
-----NIC Teaming-----
-NIC Teaming means that we have several ports on the same card and we need to bundle them to increase total traffic 
-when you have more than one card on the machine 
nmcli connection add type team con-name teamingnetwork ifname team0 config '{ "runner": {"name": "activebackup"}}'
nmcli connection add type team-slave con-name team0-slave ifname eno03283 master team0
#here we add the teaming with config type and after that we add the slave interface and master device 
nmcli connection up team0-slave 
#must make every slave up after creation <-- important 
#if you make the virtual device up, it won't make physical interfaces "slaves" up. but
#if you make it down it will makes them down 
teamdctl team0 state # to show status of the virtual device 
teamnl team0 ports #show the status of ports of the virtual device 
teamdctl team0 config dump #showing the configuration of the device in JSON format 
-to make a priority for one slave to another 
teamnl team0 options # to show all the options you can use 
teamnl team0 -p eno03283 setoption priority 100 
---------------------------------
---Network Bridging---
- we need bridging to determine which physical devices will be controlled by the virtual one
nmcli connection add type bridge con-name br0 ifname br0 #adding bridge 
nmcli connection add type bridge-slave ifname eno03283 con-name br0-slave master br0 
#linking the slave which have the priority with the bridge and make a profile called br0-slave
#with master (required) br0 which we just created 
nmcli connection modify br0 ipv4.method manual ipv4.addresses 192.168.101.200/24 
nmcli connection down br0 
nmcli connection up br0 
nmcli connection up br0-slave #must enable slave also 
brctl show #to show bridged devices 
- linking bridge with team 
#to make that link it with the team device rather than the card itself 
nmcli connection add type bridge-slave ifname team0 con-name br0-slave master br0
nmtui  #GUI utility to edit anything in your network 
-----------------------------
----interface naming----
rpm -qa | grep -i bios #to show package name that called biosdevname 
-to change name of devices from eno and ens to eth
reboot 
e
biosdevname=0 net.ifnames=0 #at line that has linux16 write this and press ctrlx
ctrlx #to restart 
-network manager here will see these interfaces as new ones so we have to do something!
nmcli connection add type ethernet con-name home ifname eth0 autoconnect yes 
#delete them and announce them again with the new name and determine which one is ethX with its macaddress
-if you restart the names will back to origin so how to make them fixed in bootloader!
vim /etc/grub2.cfg
#modify in linux16 line as before 
--------------
-how to disable network manager?
systemctl stop NetworkManager.service 
systemctl disable NetworkManager.service
systemctl start network 
systemctl enable network 
-configure manually using network service 
cd /etc/sysconfig/network-scripts
touch ifcfg-eth0 
vim ifcfg-eth0
NAME=eth0
DEVICE=eth0
BOOTPROTO=static
IPADDR=x.x.x.x 
NETMASK=x.x.x.x
GATEWAY=x.x.x.x
DNS1=x.x.x.x 
TYPE=Ethernet 
esc + :wq 
systemctl restart network 
-----------------------------------
---setting grub password---
-if the first stage of booting is corrupted you can install grub again by:
in reboot 
choose the CDRoom and troubleshooting and rescue mode 
or esc until you reach boot: and write linux rescue 
press 1 to continue 
chroot /mnt/sysimage #to choose the root from disk image itself not the image that created from the disk 
grub2-install /dev/sda  #installing grub on the sda itself not the partitions 
-----------------
-to save the machine from changing the root password from anyone that have a physical access to the machine 
grub2-setpassword
xxxx
xxxx
grub2-mkconfig -o /boot/grub2/grub.cfg  #to generate again grub file 
-in this way, no one can edit from boot before entering the password you provided 
-the command grub2-setpassword will create a file in /boot/grub2/ named user.cfg
-that have the hashing for the password to strength it.
----------------
-manual changing the file to ave the machine from changing the root password from anyone that have a physical access to it
vim /etc/grub.d/01_users 
-delete the if condition inside it because it's the if condition that created by the last process
-of generating grub file 
-the content will be:
#!/bin/sh -e 
cat << E0F
    set superusers="root"
    export superusers
    password root xxxx
E0F
:wq
grub2-mkconfig -o /boot/grub2/grub.cfg  #regenerate it again 
-this way will make the password plain text in grub file and it's not best way 
-so how to secure yourself 
grub2-mkpasswd-pbkdf2 #to create a password encrypted 
xxxx 
xxxx
-copy the hash of your password 
vim /etc/grub.d/01_users 
#!/bin/sh -e 
cat << E0F
    set superusers="root"
    export superusers
    password_pbkdf2 root "the copied encrypted pass"
E0F
:wq
------------------
-now we need just some users be able to open the OS 
grub2-mkpasswd pbkdf2 
xxxx
xxxx
-copy pass again 
vim /etc/grub.d/01_users 
#!/bin/sh -e 
cat << E0F
    set superusers="root"
    export superusers
    password_pbkdf2 root "the copied encrypted pass"
    password_pbkdf2 USER1 "the copied encrypted pass"
E0F
:wq
-here we add USER1 to the file to be able to open the OS like the root
grub2-mkconfig -o /boot/grub2/grub.cfg #must regenerate again 
vim /boot/grub2/grub.cfg 
-there is a word called --unrestricted means that anyone can start this entry and once we delete it
-no one can start this entry unless the superusers 
-if you want to add user not in the superusers >> --users USER1
-----------------------------------------------------------------------
----MAN Help----
- hashing # in the first of the line means you are root 
- $ sign in the first of the line means you are user 
man -k date #search in manual on date command 
man -k raid #will guide you to mdadm in chapter 8
man 8 mdadm  
man -K raid  # list commands to choose from them which one will do the function you search for 
-inside the manual
g >> first line in page 
G >> last line in page 
space >> transport page to page 
/word # to search for word 
n   # go to the next result
N   # previous result 
info nmcli  #like man command 
whatis nmcli #what is its function 
whereis nmcli # location of binary and man page files 
-if you want to take sample of any service that is installed, you can take it from /usr/share/doc/ 
--------------------------
---history---
-there is a file for every user for history called .bash_history, according to which user you are using now 
vim .bash_history
history  #every command in the history with numbering order 
!102 #in case 102 is ls so it will run ls command 
!-4 #run the forth command from beneath
history -c  #to delete the history but still exist in .bash_history
echo $HISTSIZE  #to know the max number of commands to be stored in history 
ctrlshift+   #make the font bigger in terminal 
ctrlshiftw   #close current tab in terminal 
yum install bash-completion # to auto-complete with TAB 
--------------------------------------------------------
---RAID (redundant array of independent disks) ---
-raid 0 is striping that means you add several disks to read and write from them with more spaces 
-raid 1 is mirroring that means to make a replica and write is slow because write on number of disks at same time 
-and read is the most fast one because it's replica 
-raid5 is striping with distributed parity that means writing parity in one of three for example to can restore that one if it's deleted 
-minimum numbers of disks in raid5 is 3 and it permits for one disk to fail to be able to restore 
-if disk is missing data delete it and the system will create the data again from the array of data
-raid 6 make two parities copies and it's better to choose even numbers of disks 
-raid 10 is 1 and 0 so it's striping and mirroring. makes raid0 between two raid1 bond 
-mdadm for multible disk administration tool > utility to create and manage RAID devices
- to start partitioning with RAID you have to make sure they don't exist in fstab 
cat /etc/fstab 
lsblk          # to ensure there are no mounted new disks of the new added disks in fstab 
mdadm --create /dev/md0 --level=5 --raid-devices=3 /dev/sdb /dev/sdc /dev/sdd 
#create raid5 with 3 devices 
cat /proc/mdstat #to follow the status of the array 
- you can put a file system even when it's building RAID 
mkfs.ext4 /dev/md0 
mount /dev/md0 /media/
-because it's RAID5 you can use size of two from the 3 devices 
watch cat /proc/mdstat #live monitor every 2 seconds 
mdadm /dev/md0 -a /dev/sdb #add a new disk to raid5
umount /media/ #if you want to unuse RAID 
mdadm --stop /dev/md0 #data will still available 
mdadm --assemble --scan  #to reassemble RAID again and scan on the config file 
vim /etc/fstab
/dev/md0    /media  ext4    defaults    0   0
:wq 
-to check if there is a mistake in fstab syntax 
umount /media/
mount -a 
df -h 
-if we want to delete data after stopping RAID 
mdadm --zero-superblock /dev/sdb 
mdadm --zero-superblock /dev/sdc 
mdadm --zero-superblock /dev/sdd #delete superblocks from disks so arrays cannot scan or assemble again 
---RAID on partitions---
-take partitions from disks and assemble them together in a RAIDx 
